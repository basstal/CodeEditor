syntax = "proto3";
package CodeEditor;



message BevTreeRoot {

}
message Composite {
    BevAbortMode abortMode = 1; // help=[打断类型，参考BevAbortMode]
}

enum BevNodeType {
    BevNodeType_None = 0;
    BevNodeType_Composite = 1;
    BevNodeType_Action = 2;
    BevNodeType_Condition = 3;
    BevNodeType_RandomSelector = 4;
}

enum BevAbortMode {
    BevAbortMode_None = 0;
    BevAbortMode_Self = 1;
    BevAbortMode_LowerPriority = 2;
    BevAbortMode_Both = 3;
}

enum DecorateType {
    DecorateType_None = 0;
    DecorateType_Not = 1;

}
message Decorate {
    DecorateType decorateType = 1; // help=[装饰节点类型 作用参考BevNode的DecorateRun映射]
}

message CodeNode {
    string name = 1; // help=[节点备注名称]
    string type = 2; // help=[节点的类型名称]
    BevNodeType nodeType = 4;
    oneof prop {
         BevTreeRoot bevTree = 9;
         Composite selector = 10;
         Composite sequence = 11;
         RandomSelector randomSelector = 12;

    //     ActionGenRandom actionGenRandom = 13;
    //     ActionMoveTo actionMoveTo = 14;
    //     ActionSetFaceDirection actionSetFaceDirection = 15;
    //     ActionSetVar actionSetVar = 17;
    //     ActionWait actionWait = 18;
    //     ActionSetAction actionSetAction = 20;
    //     ActionSetActionWithNext actionSetActionWithNext = 30;
    //     ActionCreateSnippet actionCreateSnippet = 32;
    //     ActionVarChange actionVarChange = 39;

    //     ConditionCheckDistance conditionCheckDistance = 21;
    //     ConditionCheckDistanceX conditionCheckDistanceX = 22;
    //     ConditionCheckDistanceY conditionCheckDistanceY = 23;
    //     ConditionCheckFace conditionCheckFace = 24;
    //     ConditionCheckHp conditionCheckHp = 26;
    //     ConditionCheckInPassive conditionCheckInPassive = 27;
    //     ConditionCheckVar conditionCheckVar = 28;
    //     ConditionCheckAction conditionCheckAction = 29;
    //     ConditionPhase conditionPhase = 33;
    //     ConditionAngle conditionAngle = 34;
    //     ConditionRangeActors conditionRangeActors = 35;
    //     ConditionMoveDetect conditionMoveDetect = 36;
    }
    repeated CodeNode children = 3;
    repeated Decorate decorates = 5;
}

// enum CodeTarget {
//     CodeTarget_Self = 0;
//     CodeTarget_Target = 1;

// }

// enum CodeCompareOperation {
//     CodeCompareOperation_Equal = 0;
//     CodeCompareOperation_NotEqual = 1;
//     CodeCompareOperation_BiggerThan = 2;
//     CodeCompareOperation_LessThan = 3;
//     CodeCompareOperation_BiggerThanOrEqual = 4;
//     CodeCompareOperation_LessThanOrEqual = 5;
// }

// enum CodeDistanceFaceSymbol{
//     CodeDistanceFaceSymbol_None = 0;
//     CodeDistanceFaceSymbol_Facing = 1;
//     CodeDistanceFaceSymbol_NotFacing = 2;
// }

// enum CodeFaceAction{
//     CodeFaceAction_Facing = 0;
//     CodeFaceAction_NotFacing = 1;
//     CodeFaceAction_Left = 2;
//     CodeFaceAction_Right = 3;
//     CodeFaceAction_Reverse = 4;
// }

// enum CodeSetActionType {
//     CodeSetActionType_Strong = 0;
//     CodeSetActionType_ProtectTime = 1;
//     CodeSetActionType_Weak = 2;
// }

// enum CodeValueType {
//     CodeValueType_Value = 0;
//     CodeValueType_Ratio = 1;
//     CodeValueType_Expression =2;
// }

message RandomSelector {
    repeated string weights = 1; // help=[子节点权重变量]
}

// message ActionVarChange { // help=[给定一个外部变量名，根据设置的值来改变该外部变量名对应的值]
//     string varname = 1;                 // help=[外部变量名]
//     string changeVal = 2;               // help=[设置的值]
//     bool isGlobal = 3;                  // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
//     bool isCountDownVar = 4;            // help=[是否为计时器变量]
// }

// message ActionGenRandom { // help=[生成随机数]
//     string varname = 1; // help=[自定义外部变量名]
//     sfixed64 rangeLower = 2; // help=[下界]
//     sfixed64 rangeUpper = 3; // help=[上界]
//     bool isGlobal = 4; // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
// }

// message ActionMoveTo {
//     sfixed64 tolerance = 2;         // help=[目标位置的容忍误差值]
//     string targetOffsetX = 3;     // help=[以玩家为基准的位置偏移X]
//     string targetOffsetY = 6;     // help=[以玩家为基准的位置偏移Y]
//     string action = 4;              // help=[移动开始时的动作]
//     bool curve = 5;                 // help=[使用曲线移动（可能会退化为直线）]
//     bool alwaysOnGround = 7;        // help=[保持在平台上移动 不会掉下平台]
// }

// message ActionSetAction {
//     CodeSetActionType setActionType = 2;    // help=[动作切换方式，参考CodeSetActionType]
//     bool force = 3;                         // help=[强制切动作，不考虑任何CanChangeAction条件]
//     NOAH.Proto.InputCmd cmd = 4;                       // help=[指令]
//     bool isCmd = 5;                         // help=[是否使用cmd字段]
//     string duration = 6;                    // help=[最长持续时间]
//     string actionName = 7;                  // help=[动作名]
// }

// message ActionSetActionWithNext{
//     bool force = 3;                         // help=[强制切动作，不考虑任何CanChangeAction条件]
//     sfixed64 duration = 6;                  // help=[最长持续时间]
//     string actionName = 7;                  // help=[动作名]
// }

// message ActionSetFaceDirection {
//     CodeFaceAction checkFace = 2;       // help=[朝向改变方式，参考CodeFaceAction]
// }


// message ActionSetVar {  // help=[设定一个外部变量的值]
//     string varname = 1;                 // help=[外部变量名]
//     string valueName = 3;               // help=[设置的值]
//     bool isGlobal = 4;                  // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
//     bool isCountDownVar = 5;            // help=[是否为计时器变量]
// }

// message ActionWait {
//     sfixed64 duration = 1;              // help=[固定时间]
//     sfixed64 minTime = 2;               // help=[随机时间下界]
//     sfixed64 maxTime = 3;               // help=[随机时间上界]
//     bool randomTime = 4;                // help=[是否使用随机时间]
// }

// message ActionCreateSnippet {
//     string fileName = 1;    // help=[引用的Snippet的名称]
// }

// message ConditionCheckAction {
//     CodeTarget target = 1;          // help=[目标]
//     NOAH.Proto.ActionType actionType = 2;      // help=[动作类型，参考ActionType]
//     string action = 3;              // help=[动作名]
// }

// message ConditionCheckDistance {
//     CodeCompareOperation compareOperation = 1;      // help=[比较符号]
//     sfixed64 value = 2;                             // help=[比较值，unity坐标距离]
// }

// message ConditionCheckDistanceX {
//     CodeCompareOperation compareOperation = 2;      // help=[比较符号]
//     sfixed64 value = 3;                             // help=[比较值，unity坐标距离]
//     CodeDistanceFaceSymbol faceSymbol = 5;          // help=[面向检测，参考CodeDistanceFaceSymbol]
//     sfixed64 toleranceY = 6;                        // help=[Y方向误差值，误差值在该范围外直接检测失败]
// }

// message ConditionCheckDistanceY {
//     CodeCompareOperation compareOperation = 2;      // help=[比较符号]
//     sfixed64 value = 3;                             // help=[比较值，unity坐标距离]
//     CodeDistanceFaceSymbol faceSymbol = 6;          // help=[面向检测，参考CodeDistanceFaceSymbol]
//     bool isAbsDistance = 5;                                // help=[比较时使用绝对值]
// }

// message ConditionCheckFace {
//     CodeFaceAction checkFace = 2;           // help=[朝向改变方式，参考CodeFaceAction]
// }

// message ConditionMoveDetect {
    

// }

// message ConditionRangeActors { // help=[检查由参数构造的盒子范围内是否有除自己以外的敌人角色]
//     float width = 1; // help=[检测距离半宽，高度默认为角色高]
//     float centerOffset = 2; // help=[受朝向影响的中心点偏移]
//     bool ignoreFreeMovementBounds = 3; // help=[忽略有freeMovement的角色的包围盒（不纳入检测角色）]]
// }

// message ConditionCheckHp {
//     CodeTarget target = 1;                      // help=[目标]
//     CodeCompareOperation compareOperation = 2;  // help=[比较符号]
//     sfixed64 value = 3;                         // help=[比较值]
//     CodeValueType valueType = 4;                // help=[值类型，Ratio则value填[0,1]的小数]
// }

// message ConditionCheckInPassive {
//     bool inPassive = 2;                         // help=[是Passive状态则返回成功]
// }

// message ConditionCheckVar {
//     string varname = 1;                             // help=[外部变量名]
//     CodeCompareOperation compareOperation = 2;      // help=[比较符号]
//     string expression = 3;                          // help=[比较值]
// }

// message ConditionPhase { // help=[暂缺]
//     CodeCompareOperation compareOperation = 1; // help=[比较符号]
//     int32 expression = 2;// help=[比较值]
// }

// message ConditionAngle { // help=[暂缺]
//     CodeCompareOperation compareOperation = 1; // help=[比较符号]
//     sfixed64 angleVal = 2;  // help=[角度值（度数有效范围0-90）]
//     sfixed64 offsetX = 3; // help=[目标位置偏移值, 受到目标自身朝向影响]
//     sfixed64 offsetY = 4; // help=[目标位置偏移值]
// }